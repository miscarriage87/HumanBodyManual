generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User model for authentication and profile
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Progress tracking relationships
  progress              UserProgress[]
  achievements          UserAchievement[]
  streaks               UserStreak[]
  insights              UserInsight[]
  challengeParticipants ChallengeParticipant[]
  communityAchievements UserCommunityAchievement[]

  @@map("users")
}

// Core progress tracking table
model UserProgress {
  id              String   @id @default(cuid())
  userId          String
  exerciseId      String
  bodyArea        String
  completedAt     DateTime
  durationMinutes Int?
  difficultyLevel String
  sessionNotes    String?
  biometricData   Json?
  mood            String?
  energyLevel     String?
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, completedAt])
  @@index([userId, bodyArea])
  @@index([exerciseId])
  @@map("user_progress")
}

// Achievement definitions
model Achievement {
  id          String  @id @default(cuid())
  name        String
  description String
  category    String
  criteria    Json
  badgeIcon   String?
  points      Int     @default(0)
  rarity      String  @default("common")
  createdAt   DateTime @default(now())

  userAchievements UserAchievement[]

  @@map("achievements")
}

// User achievement tracking
model UserAchievement {
  id               String   @id @default(cuid())
  userId           String
  achievementId    String
  earnedAt         DateTime @default(now())
  progressSnapshot Json?

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Streak tracking
model UserStreak {
  id               String    @id @default(cuid())
  userId           String
  streakType       String
  currentCount     Int       @default(0)
  bestCount        Int       @default(0)
  lastActivityDate DateTime?
  startedAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, streakType])
  @@map("user_streaks")
}

// Analytics and insights
model UserInsight {
  id           String    @id @default(cuid())
  userId       String
  insightType  String
  content      Json
  generatedAt  DateTime  @default(now())
  viewedAt     DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, insightType])
  @@map("user_insights")
}

// Community challenges
model CommunityChallenge {
  id           String   @id @default(cuid())
  title        String
  description  String
  startDate    DateTime
  endDate      DateTime
  targetMetric String
  targetValue  Int
  rewards      Json
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  participants ChallengeParticipant[]

  @@index([isActive, startDate, endDate])
  @@map("community_challenges")
}

// Challenge participation tracking
model ChallengeParticipant {
  id          String   @id @default(cuid())
  userId      String
  challengeId String
  joinedAt    DateTime @default(now())
  progress    Json?
  completed   Boolean  @default(false)
  completedAt DateTime?

  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge CommunityChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@index([challengeId, completed])
  @@map("challenge_participants")
}

// Community statistics (aggregated anonymized data)
model CommunityStats {
  id                    String   @id @default(cuid())
  statType              String   // 'daily', 'weekly', 'monthly'
  date                  DateTime
  totalActiveUsers      Int      @default(0)
  totalSessions         Int      @default(0)
  averageSessionDuration Float   @default(0)
  popularExercises      Json     // Array of exercise stats
  bodyAreaStats         Json     // Array of body area popularity
  generatedAt           DateTime @default(now())

  @@unique([statType, date])
  @@index([statType, date])
  @@map("community_stats")
}

// Community achievements (special achievements for community participation)
model CommunityAchievement {
  id          String  @id @default(cuid())
  name        String
  description String
  criteria    Json
  badgeIcon   String?
  points      Int     @default(0)
  rarity      String  @default("common")
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())

  userAchievements UserCommunityAchievement[]

  @@map("community_achievements")
}

// User community achievement tracking
model UserCommunityAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())
  context       Json?    // Additional context about how it was earned

  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement CommunityAchievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_community_achievements")
}

// Performance monitoring
model PerformanceMetric {
  id         String   @id @default(cuid())
  metricName String
  value      Float
  metadata   Json?
  timestamp  DateTime @default(now())

  @@index([metricName, timestamp])
  @@map("performance_metrics")
}

// User engagement tracking
model UserEngagementMetric {
  id        String   @id @default(cuid())
  userId    String
  action    String
  feature   String
  sessionId String?
  metadata  Json?
  timestamp DateTime @default(now())

  @@index([userId, feature, timestamp])
  @@index([feature, action, timestamp])
  @@map("user_engagement_metrics")
}

// System health monitoring
model SystemHealthMetric {
  id           String   @id @default(cuid())
  component    String
  status       String   // 'healthy', 'warning', 'error'
  responseTime Float?
  errorRate    Float?
  details      Json?
  timestamp    DateTime @default(now())

  @@index([component, timestamp])
  @@index([status, timestamp])
  @@map("system_health_metrics")
}

// Error tracking
model ErrorLog {
  id         String   @id @default(cuid())
  errorType  String
  message    String
  stackTrace String?
  userId     String?
  feature    String?
  metadata   Json?
  resolved   Boolean  @default(false)
  timestamp  DateTime @default(now())

  @@index([errorType, timestamp])
  @@index([feature, timestamp])
  @@index([resolved, timestamp])
  @@map("error_logs")
}
